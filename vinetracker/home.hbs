<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vine Tracker</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gridjs@6.2.0/dist/theme/mermaid.min.css" integrity="sha256-q5WF45g6VyZ6jyL3CP5ArXD4wb1WiOv7ox0RoMfMozE=" crossorigin="anonymous">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/js/bootstrap.bundle.min.js" integrity="sha384-FKyoEForCGlyvwx9Hj09JcYn3nv7wiPVlz7YYwJrWVcXK/BmnVDxM+D2scQbITxI" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/gridjs@6.2.0/dist/gridjs.production.min.js" integrity="sha256-90AvNHcVVoxz8GF4Ht2Ofc7uzdfiUDwooQErfMvBJQk=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/dropzone@5.9.3/dist/min/dropzone.min.js" integrity="sha256-uCdT6FLkY6+68Xzm4f9O0usHnJPdKv0Q0rsoXvLchP4=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dropzone@5.9.3/dist/min/dropzone.min.css" integrity="sha256-n/Cuyrm+v15Nim0mJ2ZrElHlCk8raJs/57WeCsIzDr4=" crossorigin="anonymous">
  <script>var module = {};</script>
  <script src="https://cdn.jsdelivr.net/npm/lodash.debounce@4.0.8/index.min.js"></script>
  <style>
    .fs-7 {
      font-size: 0.8rem;
    }
    a {
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .filters {
      float: right;
      height: 42px;
      display: flex;
      align-items: center;
    }
    .btn-force {
      padding: var(--bs-btn-padding-y) var(--bs-btn-padding-x) !important;
      border: var(--bs-btn-border-width) solid var(--bs-btn-border-color) !important;
      background-color: var(--bs-btn-bg) !important;
    }
    .btn-force:hover {
      background-color: var(--bs-btn-hover-bg) !important;
      border-color: var(--bs-btn-hover-border-color) !important;
    }
    .btn-force.active {
      background-color: var(--bs-btn-active-bg) !important;
      border-color: var(--bs-btn-active-border-color) !important;
    }
    .cancelled {
      display: inline-block;
      padding: 4px;
      background-color: #c00;
      color: #fff;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.6rem;
      border-radius: 8px;
    }
  </style>
</head>
<body class="container-fluid bg-light" style="padding-top: 70px;">
  <nav class="navbar fixed-top navbar-expand-lg bg-info">
    <div class="container-fluid">
      <a class="navbar-brand" href="{{ ingress }}/">Vine Tracker</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="{{ ingress }}/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{{ ingress }}/report">Report</a>
          </li>
        </ul>
        <button class="btn btn-light" type="button" data-bs-toggle="modal" data-bs-target="#uploadModal">Upload Orders</button>
      </div>
    </nav>
    <div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="uploadModalLabel">Upload Orders</h1>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form action="{{ ingress }}/upload" class="dropzone" id="orderUploadDropzone"></form>
            <script>
              Dropzone.options.orderUploadDropzone = {
                acceptedFiles: '.xlsx',
                init: function() {
                  this.on('success', function(file, response) {
                    console.log(`Upload complete: ${response.inserted} orders inserted, ${response.updated} orders updated, ${response.failed} lines failed.`);
                    bootstrap.Modal.getInstance(document.getElementById('uploadModal')).hide();
                    grid?.forceRender();
                  });
                }
              };
            </script>
          </div>
        </div>
      </div>
    </div>
    <main id="main"></main>
    <script type="text/javascript">
      let grid = null;
      function refreshGrid() {
        const paginationSummaryElm = document.querySelector('.gridjs-summary');
        if (!paginationSummaryElm) throw new Error('no pagination summary found');
        const paginationSummary = paginationSummaryElm.getAttribute('title');
        const currentPageStr = paginationSummary.substring(5, paginationSummary.indexOf(' ', 5));
        const currentPage = parseInt(currentPageStr, 10);
        if (Number.isNaN(currentPage)) throw new Error('invalid page found: ' + currentPageStr);

        grid?.updateConfig({
          pagination: {
            resetPageOnUpdate: false,
            page: currentPage - 1
          }
        });

        grid?.forceRender();
      }
      function updateETVFactor(orderNumber, factor, originalEtv) {
        const customInput = document.getElementById(`custom-${orderNumber}`);
        if (factor === 'custom') {
          if (!customInput) return;
          customInput.value = originalEtv.toFixed(2);
          customInput.classList.remove('d-none');
          customInput.classList.add('d-block');
          return;
        } else {
          customInput.classList.remove('d-block');
          customInput.classList.add('d-none');
        }

        fetch(`{{ ingress }}/orders/${orderNumber}/etv`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ etvFactor: factor === null ? null : parseFloat(factor) }),
        }).then(() => {
          refreshGrid();
        });
      }

      function updateETVReason(orderNumber, reason) {
        fetch(`{{ ingress }}/orders/${orderNumber}/etv-reason`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ reason }),
        }).then(() => {
          refreshGrid();
        });
      }

      function updateCustomETVReal(orderNumber, strCustomValue, originalEtv) {
        if (!strCustomValue) return;
        const customValue = parseFloat(strCustomValue);
        if (Number.isNaN(customValue)) return;
        const etvFactor = customValue / originalEtv;
        fetch(`{{ ingress }}/orders/${orderNumber}/etv`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ etvFactor })
        }).then(() => {
          refreshGrid();
        })
      }
      const updateCustomETV = debounce(updateCustomETVReal, 200);

      const urlParams = new URLSearchParams(window.location.search);
      let selectedFilter = urlParams.get('filter') || 'all';

      grid = new gridjs.Grid({
        fixedHeader: true,
        pagination: {
          resetPageOnUpdate: false
        },
        search: {
          selector: (cell, rowIndex, cellIndex) => cellIndex === 5 ? cell === null ? 'not-adjusted' : cell : cell
        },
        columns: [
          {
            name: 'Number',
            formatter: (cell, row) => gridjs.html(`${row.cells[8].data ? '<span class="cancelled">Cancelled</span><br />' : ''}<a href="https://www.amazon.com/gp/your-account/order-details?orderID=${cell}" target="_blank" rel="noopener noreferrer" class="fs-7">${cell}</a>`),
          },
          {
            name: 'ASIN',
            formatter: (cell) => gridjs.html(`<a href="https://www.amazon.com/dp/${cell}" target="_blank" rel="noopener noreferrer" class="fs-7">${cell}</a>`),
          },
          {
            name: 'Product',
            formatter: (cell, row) => gridjs.html(`<a href="https://www.amazon.com/dp/${row.cells[1].data}" target="_blank" rel="noopener noreferrer">${cell}</a>`),
          },
          {
            name: 'Order date',
            formatter: (cell) => gridjs.html(`<time datetime="${cell}">${new Date(cell).toLocaleDateString()}</time>`),
            sort: true,
          },
          {
            name: 'ETV',
            formatter: (cell) => gridjs.html(`$${cell.toFixed(2)}`),
            sort: true,
          },
          {
            name: 'ETV Factor',
            formatter: (cell, row) => {
              // Cancelled
              if (row.cells[8].data) return '';
              
              // Not cancelled
              const isCustom = (cell !== null && cell !== 0 && cell !== 0.2 && cell !== 0.5);
              return row.cells[4].data === 0 ? '' : gridjs.html(`<select onchange="updateETVFactor('${row.cells[0].data}', this.value, ${row.cells[4].data})" class="form-select">
                <option value="" ${cell === null ? 'selected' : ''}></option>
                <option value="0" ${cell === 0 ? 'selected' : ''}>0%</option>
                <option value="0.2" ${cell === 0.2 ? 'selected' : ''}>20%</option>
                <option value="0.5" ${cell === 0.5 ? 'selected' : ''}>50%</option>
                <option value="custom" ${isCustom ? 'selected' : ''}>Custom</option>
              </select>
              <input type="number" class="form-control ${isCustom ? 'd-block' : 'd-none'}" id="custom-${row.cells[0].data}" onchange="updateCustomETV('${row.cells[0].data}', this.value, ${row.cells[4].data})" min="0" step="0.01" value="${isCustom ? (row.cells[4].data * cell).toFixed(2) : row.cells[4].data.toFixed(2)}" />
              ${cell !== null && cell !== 0.2 ? `
                <select onchange="updateETVReason('${row.cells[0].data}', this.value)" class="form-select d-block">
                  <option value="" ${row.cells[7].data === null ? 'selected' : ''}></option>
                  <optgroup label="Reasons for low percent">
                    {{#each lowReasons}}
                    <option value="{{this}}" ${row.cells[7].data === '{{this}}' ? 'selected' : ''}>{{this}}</option>
                    {{/each}}
                  </optgroup>
                  <optgroup label="Reasons for high percent">
                    {{#each highReasons}}
                    <option value="{{this}}" ${row.cells[7].data === '{{this}}' ? 'selected' : ''}>{{this}}</option>
                    {{/each}}
                  </optgroup>
                  <option value="Adjusted fair market value" ${row.cells[7].data === 'Adjusted fair market value' ? 'selected' : ''}>Adjusted fair market value</option>
                  <option value="Other" ${row.cells[7].data === 'Other' ? 'selected' : ''}>Other</option>
                </select>` : ''}`);
            },
            sort: true,
          },
          {
            name: 'Adjusted ETV',
            formatter: (cell, row) => row.cells[8].data ? gridjs.html('$0.00') : gridjs.html(`$${cell.toFixed(2)}`),
            sort: true,
          },
          {
            name: 'ETV Reason',
            hidden: true,
          },
          {
            name: 'Cancelled',
            hidden: true,
          }
        ],
        server: {
          url: '{{ ingress }}/orders' + (selectedFilter === 'cancelled' ? '?cancelled=true' : ''),
          then: data => {
            const orders = selectedFilter === 'adjusted' ? data.orders.filter(order => order.etvFactor === null || (
              order.etvFactor !== null && order.etvFactor !== 0.2 && order.etvReason === null)) : data.orders;
            return orders.map(order => [
              order.number,
              order.asin,
              order.product,
              order.orderedAt,
              order.etv,
              order.etvFactor,
              order.etv * (order.etvFactor ?? 1),
              order.etvReason || null,
              order.cancelled
            ]);
          }
        }
      });

      function filterPlugin() {
        return gridjs.h('div', {
          className: 'filters'
        }, [
          gridjs.h('div', { className: 'btn-group', role: 'group' }, [
            gridjs.h('button', {
              className: 'btn btn-outline-secondary btn-force' + (selectedFilter === 'all' ? ' active' : ''),
              type: 'button',
              onclick: () => {
                location.href = '{{ ingress }}/?filter=all';
              }
            }, 'All'),
            gridjs.h('button', {
              className: 'btn btn-outline-secondary btn-force' + (selectedFilter === 'adjusted' ? ' active' : ''),
              onclick: () => {
                location.href = '{{ ingress }}/?filter=adjusted';
              }
            }, 'Not Adjusted'),
            gridjs.h('button', {
              className: 'btn btn-outline-secondary btn-force' + (selectedFilter === 'cancelled' ? ' active' : ''),
              onclick: () => {
                location.href = '{{ ingress }}/?filter=cancelled';
              }
            }, 'Cancelled'),
          ])
        ]);
      }
      grid.plugin.add({
        id: 'filterPlugin',
        component: filterPlugin,
        position: 0 // header
      });

      grid.render(document.getElementById("main"));
  </script>
</body>
</html>
