<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vine Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/js/bootstrap.bundle.min.js" integrity="sha384-FKyoEForCGlyvwx9Hj09JcYn3nv7wiPVlz7YYwJrWVcXK/BmnVDxM+D2scQbITxI" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.5.1/dist/chart.umd.min.js" integrity="sha256-SERKgtTty1vsDxll+qzd4Y2cF9swY9BCq62i9wXJ9Uo=" crossorigin="anonymous"></script>
  <style>
    .fs-7 {
      font-size: 0.8rem;
    }
    a {
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body class="container-fluid bg-light" style="padding-top: 70px;">
  <nav class="navbar fixed-top navbar-expand-lg bg-info">
    <div class="container-fluid">
      <a class="navbar-brand" href="{{ ingress }}/">Vine Tracker</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="{{ ingress }}/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="{{ ingress }}/overview">Overview</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{{ ingress }}/tax-report">Tax Report</a>
          </li>
        </ul>
      </div>
    </nav>
    <main id="main">
      <div class="container-fluid mb-3">
        <select id="year" class="form-select" style="max-width: 200px; margin-bottom: 10px;">
        </select>
      </div>
      <div id="report-content" class="container-fluid"></div>
      <script>
        const yearSelect = document.getElementById('year');
        let year = 2025;
        for (let cur = new Date().getFullYear(); year <= cur; year++) {
          const option = document.createElement('option');
          option.value = year;
          option.textContent = year;
          yearSelect.appendChild(option);
        }
        yearSelect.addEventListener('change', () => {
          year = parseInt(yearSelect.value);
          loadReport(year);
        });
        loadReport(year - 1);

        const months = [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];

        async function loadReport(year) {
          const response = await fetch(`{{ ingress }}/report-data/${year}`);
          const report = await response.json();
          const currencyFormatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
          });
          document.getElementById('report-content').innerHTML = `
            <h1 class="fs-3 mb-3">Report for ${year}</h1>
            <div class="mb-5">
              <div class="row g-0 mx-0">
                <div class="col-12 col-md-4 mb-2 mb-md-0 pe-md-2">
                  <div class="card">
                    <div class="card-body">
                      <h5 class="card-title">Total ETV</h5>
                      <p class="card-text fs-1">${currencyFormatter.format(report.totalEtv)}</p>
                    </div>
                  </div>
                </div>
                <div class="col-12 col-md-4 mb-2 mb-md-0">
                  <div class="card">
                    <div class="card-body">
                      <h5 class="card-title">Total Adjusted ETV</h5>
                      <p class="card-text fs-1">${currencyFormatter.format(report.totalAdjustedEtv)}</p>
                    </div>
                  </div>
                </div>
                <div class="col-12 col-md-4 ps-md-2">
                  <div class="card">
                    <div class="card-body">
                      <h5 class="card-title">Orders</h5>
                      <p class="card-text fs-1">${report.orderCount}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="mb-5 row">
              <canvas id="chart"></canvas>
            </div>
            <table class="table table-striped">
              <thead>
                <tr>
                  <th>Month</th>
                  <th>Total ETV</th>
                  <th>Total Adjusted ETV</th>
                  <th>Orders</th>
                </tr>
              </thead>
              <tbody>
                ${report.monthly.map(month => `
                  <tr>
                    <td>${months[month.month - 1]}</td>
                    <td>${currencyFormatter.format(month.totalEtv)}</td>
                    <td>${currencyFormatter.format(month.totalAdjustedEtv)}</td>
                    <td>${month.orderCount}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          `;
          const dates = Array.from(Object.keys(report.orderCountByDate));
          const chart = new Chart(
            document.getElementById('chart'),
            {
              type: 'line',
              data: {
                labels: Object.keys(report.orderCountByDate),
                datasets: [{
                  label: 'Order count by day',
                  data: Object.values(report.orderCountByDate),
                  pointStyle: 'circle',
                  yAxisID: 'count'
                }, {
                  label: 'Order ETV by day',
                  data: Object.values(report.orderETVByDate),
                  pointStyle: 'circle',
                  yAxisID: 'etv'
                }]
              },
              options: {
                scales: {
                  count: {
                    position: 'left'
                  },
                  etv: {
                    position: 'right',
                    ticks: {
                      callback: value => `$${value}`
                    }
                  }
                },
                onClick: (evt, elements) => {
                  if (elements.length > 0) {
                    const idx = elements[0].index;
                    const date = dates[idx];
                    document.location.href = `{{ingress}}/?s=${date}`;
                  }
                }
              }
            });
        }
      </script>
    </main>
  </body>
</html>
